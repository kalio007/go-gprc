// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SimpleGreet_SayHello_FullMethodName                    = "/simple_greet.SimpleGreet/SayHello"
	SimpleGreet_SayHelloServerStream_FullMethodName        = "/simple_greet.SimpleGreet/SayHelloServerStream"
	SimpleGreet_SayHelloClientStream_FullMethodName        = "/simple_greet.SimpleGreet/SayHelloClientStream"
	SimpleGreet_SayHelloBidirectionalStream_FullMethodName = "/simple_greet.SimpleGreet/SayHelloBidirectionalStream"
)

// SimpleGreetClient is the client API for SimpleGreet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleGreetClient interface {
	SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStream(ctx context.Context, in *NameList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NameList, MessageList], error)
	SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloResponse, HelloResponse], error)
}

type simpleGreetClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleGreetClient(cc grpc.ClientConnInterface) SimpleGreetClient {
	return &simpleGreetClient{cc}
}

func (c *simpleGreetClient) SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, SimpleGreet_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleGreetClient) SayHelloServerStream(ctx context.Context, in *NameList, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SimpleGreet_ServiceDesc.Streams[0], SimpleGreet_SayHelloServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NameList, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleGreet_SayHelloServerStreamClient = grpc.ServerStreamingClient[HelloResponse]

func (c *simpleGreetClient) SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NameList, MessageList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SimpleGreet_ServiceDesc.Streams[1], SimpleGreet_SayHelloClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NameList, MessageList]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleGreet_SayHelloClientStreamClient = grpc.ClientStreamingClient[NameList, MessageList]

func (c *simpleGreetClient) SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloResponse, HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SimpleGreet_ServiceDesc.Streams[2], SimpleGreet_SayHelloBidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloResponse, HelloResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleGreet_SayHelloBidirectionalStreamClient = grpc.BidiStreamingClient[HelloResponse, HelloResponse]

// SimpleGreetServer is the server API for SimpleGreet service.
// All implementations must embed UnimplementedSimpleGreetServer
// for forward compatibility.
type SimpleGreetServer interface {
	SayHello(context.Context, *NoParam) (*HelloResponse, error)
	SayHelloServerStream(*NameList, grpc.ServerStreamingServer[HelloResponse]) error
	SayHelloClientStream(grpc.ClientStreamingServer[NameList, MessageList]) error
	SayHelloBidirectionalStream(grpc.BidiStreamingServer[HelloResponse, HelloResponse]) error
	mustEmbedUnimplementedSimpleGreetServer()
}

// UnimplementedSimpleGreetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSimpleGreetServer struct{}

func (UnimplementedSimpleGreetServer) SayHello(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSimpleGreetServer) SayHelloServerStream(*NameList, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStream not implemented")
}
func (UnimplementedSimpleGreetServer) SayHelloClientStream(grpc.ClientStreamingServer[NameList, MessageList]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStream not implemented")
}
func (UnimplementedSimpleGreetServer) SayHelloBidirectionalStream(grpc.BidiStreamingServer[HelloResponse, HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStream not implemented")
}
func (UnimplementedSimpleGreetServer) mustEmbedUnimplementedSimpleGreetServer() {}
func (UnimplementedSimpleGreetServer) testEmbeddedByValue()                     {}

// UnsafeSimpleGreetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleGreetServer will
// result in compilation errors.
type UnsafeSimpleGreetServer interface {
	mustEmbedUnimplementedSimpleGreetServer()
}

func RegisterSimpleGreetServer(s grpc.ServiceRegistrar, srv SimpleGreetServer) {
	// If the following call pancis, it indicates UnimplementedSimpleGreetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SimpleGreet_ServiceDesc, srv)
}

func _SimpleGreet_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleGreetServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleGreet_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleGreetServer).SayHello(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleGreet_SayHelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NameList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleGreetServer).SayHelloServerStream(m, &grpc.GenericServerStream[NameList, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleGreet_SayHelloServerStreamServer = grpc.ServerStreamingServer[HelloResponse]

func _SimpleGreet_SayHelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleGreetServer).SayHelloClientStream(&grpc.GenericServerStream[NameList, MessageList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleGreet_SayHelloClientStreamServer = grpc.ClientStreamingServer[NameList, MessageList]

func _SimpleGreet_SayHelloBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleGreetServer).SayHelloBidirectionalStream(&grpc.GenericServerStream[HelloResponse, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimpleGreet_SayHelloBidirectionalStreamServer = grpc.BidiStreamingServer[HelloResponse, HelloResponse]

// SimpleGreet_ServiceDesc is the grpc.ServiceDesc for SimpleGreet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleGreet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple_greet.SimpleGreet",
	HandlerType: (*SimpleGreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SimpleGreet_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStream",
			Handler:       _SimpleGreet_SayHelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStream",
			Handler:       _SimpleGreet_SayHelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStream",
			Handler:       _SimpleGreet_SayHelloBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
